<?php
namespace app\controllers;
use yii\web\Controller;
use app\models\Internaute;
use app\models\Voyage;
use app\models\Reservation;
use app\models\Trajet;
use app\models\SignupForm;
use yii\helpers\Html; //Utilisation des helpers de Yii
use Yii;
use yii\web\Request; // classe qui gère l'accès aux données de la requête (POST, GET, cookies...)

class TestController extends Controller
{   
    //Lien utilisé pour le test: https://pedago.univ-avignon.fr/~uapv2400316/Basic_Yii/web/index.php?r=test/view&pseudo=....
    //Action pour gérer la récupération des infos d'1 utilisateur à partir de son pseudo(Etape 2)
    public function actionView($pseudo)
    {
        // Récupérer l'internaute par son pseudo
        $internaute = Internaute::getUserByIdentifiant($pseudo);

        // Si l'internaute n'existe pas, afficher un message d'erreur
        if (!$internaute) {
            return $this->renderContent("Internaute non trouvé.");
        }
        $voyages = [];
        $reservations = [];
        $voyages = $internaute->voyages; // Tous les voyages proposés par cet internaute
        $reservations = $internaute->reservations; // Toutes les réservations effectuées par cet internaute
        return $this->render('view', [
            'internaute' => $internaute,
            'voyages' => $voyages,
            'reservations' => $reservations,
        ]);
    }
    
    //Action pour gérer la recherche (Partie3)   
    /*public function actionSearch()
    {
       // Créer un modèle dynamique pour la recherche
       $model = new \yii\base\DynamicModel(['villeDepart', 'villeArrivee', 'nbPersonnes']);
       $model->addRule(['villeDepart', 'villeArrivee', 'nbPersonnes'], 'required'); // Validation de champs requis

       $voyages = [];
       // Lorsque la requête est postée, on charge les données et on effectue la recherche
       if ($model->load(Yii::$app->request->post()) && $model->validate()) 
            $voyages = Voyage::searchVoyages($model->villeDepart, $model->villeArrivee, $model->nbPersonnes);

       return $this->render('search', [
         'model' => $model,
         'voyages' => $voyages,
       ]);
    }*/
    //Partie 04
    public function actionSearch()
    {
       $model = new \yii\base\DynamicModel(['villeDepart', 'villeArrivee', 'nbPersonnes']); // Créer un modèle dynamique avec les champs de recherche
       $model->addRule(['villeDepart', 'villeArrivee', 'nbPersonnes'], 'required'); // Validation des champs requis
       $model->addRule('nbPersonnes', 'integer'); // Validation de type pour 'nbPersonnes'
       if (!$model->nbPersonnes) // Définir une valeur par défaut pour 'nbPersonnes'
            $model->nbPersonnes = 1; // Valeur par défaut
       if (Yii::$app->request->isAjax) {  // Vérifier si la requête est en AJAX (pour une recherche dynamique)
        if ($model->load(Yii::$app->request->post()) && $model->validate()) { // Charger les données du formulaire dans le modèle
            $villeDepart = $model->villeDepart;
            $villeArrivee = $model->villeArrivee;
            $nbPersonnes = $model->nbPersonnes;
            $result = Voyage::searchVoyages($villeDepart, $villeArrivee, $nbPersonnes); // Effectuer la recherche des voyages
            return $this->asJson([  // Renvoyer la réponse au format JSON pour l'AJAX
                'voyages' => $result['voyages'], // Résultats de la recherche
                'notifications' => $result['notifications'], // Notifications, si besoin
            ]);
        } else 
            return $this->asJson([  // Si la validation échoue, envoyer les erreurs de validation
                'errors' => $model->errors,
            ]);
       }
       return $this->render('search', [   // Rendre la vue si ce n'est pas une requête AJAX
        'model' => $model,
       ]);
    }
    
    //Partie 05
    public function actionSignup()
    {
      $model = new SignupForm(); // Créer le modèle SignupForm
      if (Yii::$app->request->isAjax) {
        // Charger les données postées et vérifier la validation
        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            // Si les données sont valides, appeler la méthode signup() du modèle
            return $this->asJson($model->signup());  // Cette méthode devrait retourner les notifications JSON
        }

        // Si la validation échoue, renvoyer les erreurs
        return $this->asJson([
            'notifications' => [
                [
                    'type' => 'warning',
                    'message' => 'Veuillez vérifier les informations saisies.',
                ],
            ],
        ]);
      }

      // Si ce n'est pas une requête AJAX, rendre la vue du formulaire d'inscription
      return $this->render('signup', [
        'model' => $model,
      ]);
    }

}
?>
